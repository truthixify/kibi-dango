'use client'

import { useProvider } from '@starknet-react/core'
import { useCallback, useState } from 'react'
import { useTargetNetwork } from '~~/hooks/scaffold-stark/useTargetNetwork'
import configExternalContracts from '~~/contracts/configExternalContracts'
import { deepMergeContracts } from '~~/utils/scaffold-stark/contract'
import { ArrowDownTrayIcon } from '@heroicons/react/24/outline'
import Link from 'next/link'
import prettier from 'prettier/standalone'
import parserTypescript from 'prettier/plugins/typescript'
import prettierPluginEstree from 'prettier/plugins/estree'

export default function DownloadContracts() {
    const { provider } = useProvider()
    const [address, setAddress] = useState<string>('')

    const { targetNetwork } = useTargetNetwork()
    const [contractName, setContractName] = useState<string>('')

    const handleDownload = useCallback(async () => {
        if (!address) return
        try {
            const [apiResponse, classHash] = await Promise.all([
                provider.getClassAt(address),
                provider.getClassHashAt(address),
            ])

            const contractData = {
                [targetNetwork.network]: {
                    [contractName]: {
                        address,
                        classHash,
                        abi: apiResponse.abi,
                    },
                },
            }
            const mergedPredeployedContracts = deepMergeContracts(
                contractData,
                configExternalContracts
            )

            generateContractsFile(mergedPredeployedContracts)
        } catch (error) {
            console.error(error)
            return
        }
    }, [address, provider, contractName, targetNetwork.network])

    const generateContractsFile = async (contractsData: Object) => {
        const generatedContractComment = `/**
* This file is autogenerated by Scaffold-Stark.
* You should not edit it manually or your changes might be overwritten.
*/`

        const configExternalContracts = await prettier.format(
            `${generatedContractComment}\n\nconst configExternalContracts = ${JSON.stringify(
                contractsData
            )} as const;\n\nexport default configExternalContracts;`,
            {
                parser: 'typescript',
                plugins: [parserTypescript, prettierPluginEstree],
            }
        )
        const blob = new Blob([configExternalContracts], {
            type: 'text/typescript',
        })
        const url = URL.createObjectURL(blob)
        const a = document.createElement('a')
        a.href = url
        a.download = 'configExternalContracts.ts'
        a.click()
        URL.revokeObjectURL(url)
    }

    return (
        <div className="flex flex-col items-center justify-center gap-y-6 py-8 lg:gap-y-8 lg:py-12">
            <div className="border-gradient contract-content mx-2 w-full max-w-6xl rounded-[5px] p-6 px-8">
                <div className="mb-2 text-xl font-bold">
                    Fetch Contract Configuration File from Contract Address
                </div>
                <div className="flex flex-col gap-12 sm:flex-row sm:gap-24">
                    <div className="flex-1">
                        <div className="my-3 text-lg font-bold">Instructions</div>
                        <p className="my-2">
                            This tool generate a contract configuration file by entering a contract
                            address and name. The downloaded file can be used to replace your local{' '}
                            <code className="text-function">configExternalContracts.ts</code> for
                            debugging.
                        </p>
                        <ol className="my-6 ml-4 flex list-outside list-decimal flex-col gap-2 space-y-1">
                            <li className="pl-3">Enter contract name and address</li>
                            <li className="pl-3">
                                Click{' '}
                                <strong className="text-function">Download Contract File</strong>
                            </li>
                            <li className="pl-3">
                                Replace your{' '}
                                <code className="text-function">configExternalContracts.ts</code>{' '}
                                file
                            </li>
                            <li className="pl-3">
                                Debug your contract at{' '}
                                <Link href={'/debug'} className="text-function">
                                    <code>/debug</code>
                                </Link>{' '}
                                and use hooks with the downloaded contract
                            </li>
                        </ol>
                    </div>
                    <div className="flex-1 px-12">
                        {targetNetwork && (
                            <div className="text-md my-4 flex flex-col">
                                <div className="text-function mb-2 w-24 break-words font-medium">
                                    Network
                                </div>
                                <span>{targetNetwork.name}</span>
                            </div>
                        )}
                        <div className="my-6 flex flex-col">
                            <div className="text-function mb-2 w-24 break-words font-medium">
                                Contract
                            </div>
                            <input
                                value={contractName}
                                onChange={e => setContractName(e.target.value)}
                                list="symbols"
                                className="bg-input input input-ghost h-[2.2rem] min-h-[2.2rem] w-full rounded-none border px-4 text-sm text-neutral placeholder:text-[#9596BF] focus-within:border-transparent focus:outline-none"
                                placeholder="Enter contract name"
                            />
                        </div>
                        <div className="my-6 flex flex-col text-accent">
                            <div className="text-function mb-2 w-24 break-words font-medium">
                                Address
                            </div>
                            <div className="flex flex-1 gap-4">
                                <input
                                    className="bg-input input input-ghost h-[2.2rem] min-h-[2.2rem] w-full rounded-none border px-4 text-sm text-neutral placeholder:text-[#9596BF] focus-within:border-transparent focus:outline-none"
                                    type="text"
                                    placeholder="Enter contract address"
                                    value={address}
                                    onChange={e => setAddress(e.target.value)}
                                />
                            </div>
                            <button
                                className="bg-gradient-nav btn btn-sm mt-12 flex max-w-56 gap-2 !text-white shadow-md"
                                onClick={handleDownload}
                            >
                                Download Contract File
                                <span>
                                    <ArrowDownTrayIcon
                                        className="h-4 w-4 cursor-pointer"
                                        aria-hidden="true"
                                    />
                                </span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
}
